name: CI & Deploy to Render

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# prevent overlapping deploys on the same branch
concurrency:
  group: render-deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Run tests
        run: mvn -B -ntp test

  deploy:
    name: Deploy to Render (via API)
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    env:
      RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      COMMIT_ID: ${{ github.sha }}
    steps:
      - name: Validate required secrets
        run: |
          set -euo pipefail
          [ -n "${RENDER_SERVICE_ID:-}" ] || { echo "Missing secret: RENDER_SERVICE_ID"; exit 1; }
          [ -n "${RENDER_API_KEY:-}" ]   || { echo "Missing secret: RENDER_API_KEY"; exit 1; }

      - name: Ensure jq is available
        run: sudo apt-get update && sudo apt-get install -y jq

      # Trigger a deploy WITHOUT clearCache (minimal JSON body)
      - name: Trigger Render deploy
        id: trigger
        run: |
          set -euo pipefail
          # you can include commitId if you want; many users just send {}
          payload=$(jq -n --arg commitId "${COMMIT_ID}" '{commitId:$commitId}')
          echo "Payload: $payload"

          resp=$(curl -sS -X POST \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$payload")

          echo "API response: $resp"
          id=$(echo "$resp" | jq -r '.id // empty')
          [ -n "$id" ] || { echo "Failed to trigger deploy"; exit 1; }
          echo "deploy_id=$id" >> "$GITHUB_OUTPUT"

      - name: Wait until Live
        run: |
          set -euo pipefail
          id="${{ steps.trigger.outputs.deploy_id }}"
          echo "Waiting for deploy: $id"
          for i in $(seq 1 120); do
            resp=$(curl -sS -H "Authorization: Bearer ${RENDER_API_KEY}" \
              "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys/$id")
            status=$(echo "$resp" | jq -r '.status')
            echo "[$i] status=$status"
            case "$status" in
              live)     echo "Deploy is live ‚úÖ"; exit 0 ;;
              failed)   echo "Deploy failed ‚ùå"; echo "$resp"; exit 1 ;;
              canceled) echo "Deploy canceled üõë"; echo "$resp"; exit 1 ;;
            esac
            sleep 10
          done
          echo "Timeout waiting for deploy to go live"; exit 1
